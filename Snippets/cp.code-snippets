{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Disjoin Set Union": {
		"scope": "cpp",
		"prefix": "DisjointSetUnion",
		"body": [
		  "struct DSU {",
		  "    vector<int> par, rnk, sz;",
		  "    int c; //conncected components;",
		  "    DSU(int n) : par(n+1), rnk(n+1, 0), sz(n +1, 1), c(n) {",
		  "        for(int i = 1; i <= n; ++i) par[i] = i;",
		  "    }",
		  "    int find(int u) {",
		  "        return par[u] == u?u:par[u] == find(par[u]);",
		  "    }",
		  "    bool same(int u, int v){",
		  "        return find(u) == find(v);",
		  "    }",
		  "    int get_size(int u) {",
		  "        return sz[find(u)];",
		  "    }",
		  "    int count(){",
		  "        return c;",
		  "    }",
		  "    int merge(int u, int v){",
		  "        u = find(u);",
		  "        v = find(v);",
		  "        if(u == v)return -1;",
		  "        else --c;",
		  "        if(rnk[u] > rnk[v])swap(u, v);",
		  "        par[u] = v;",
		  "        sz[v] += u;",
		  "        if(rnk[u] == rnk[v])rnk[v]++;",
		  "        return v;",
		  "    }",
		  "}"
		],
		"description": "Disjoin Set Union"
	  }
}