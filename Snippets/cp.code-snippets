{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Disjoin Set Union": {
        "scope" : "cpp",
        "prefix": "DisjointSetUnion",
        "body": [
          "struct DSU {",
          "    vector<int> par, rnk, sz;",
          "    int c; // Connected components;",
          "",
          "    DSU(int n) : par(n + 1), rnk(n + 1, 0), sz(n + 1, 1), c(n) {",
          "        for (int i = 1; i <= n; ++i)",
          "            par[i] = i;",
          "    }",
          "",
          "    int find(int u) {",
          "        return par[u] == u ? u : par[u] = find(par[u]);",
          "    }",
          "",
          "    bool same(int u, int v) {",
          "        return find(u) == find(v);",
          "    }",
          "",
          "    int get_size(int u) {",
          "        return sz[find(u)];",
          "    }",
          "",
          "    int count() {",
          "        return c;",
          "    }",
          "",
          "    int merge(int u, int v) {",
          "        u = find(u);",
          "        v = find(v);",
          "        if (u == v) return -1;",
          "        else --c;",
          "        if (rnk[u] > rnk[v]) swap(u, v);",
          "        par[u] = v;",
          "        sz[v] += sz[u];",
          "        if (rnk[u] == rnk[v]) rnk[v]++;",
          "        return v;",
          "    }",
          "} dsu;"
        ],
        "description": "Disjoin Set Union"
      },
      "Trie Data Structure": {
        "scope": "cpp",
        "prefix": "Trie",
        "body": [
          "struct Trie {",
          "    struct TrieNode {",
          "        unordered_map<char, TrieNode *> children;",
          "        bool last = false;",
          "    };",
          "    TrieNode *root;",
          "    Trie() {",
          "        root = new TrieNode();",
          "    }",
          "    bool insert(string s) {",
          "        TrieNode *tree = root;",
          "        for(auto &i : s) {",
          "            if(!tree->children.count(i)) tree->children[i] = new TrieNode();",
          "            tree = tree->children[i];",
          "        }",
          "        tree->last = true;",
          "        return true;",
          "    }",
          "    bool search(string s) {",
          "        TrieNode *tree = root;",
          "        for(auto &i : s) {",
          "            if(!tree->children.count(i)) return false;",
          "            tree = tree->children[i];",
          "        }",
          "        return tree->last;",
          "    }",
          "    bool prefix(string s) {",
          "        TrieNode *tree = root;",
          "        for(auto &i : s) {",
          "            if(!tree->children.count(i)) return false;",
          "            tree = tree->children[i];",
          "        }",
          "        return true;",
          "    }",
          "",
          "} trie;"
        ],
        "description": "Trie Data Structure"
      }
}